---
apiVersion: v1
kind: Service
metadata:
  name: jaeger
  labels:
    app: jaeger
    component: jaeger
spec:
  ports:
  - name: jaeger # endpoint for testotel tomcat app.
    port: 16686
    protocol: TCP
    targetPort: 16686
  - name: jaegeragent # endpoint for testotel tomcat app.
    port: 14250
    protocol: TCP
    targetPort: 14250
  selector:
    component: jaeger
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jaeger
  labels:
    app: jaeger
    component: jaeger
spec:
  selector:
    matchLabels:
      app: jaeger
      component: jaeger
  minReadySeconds: 5
  progressDeadlineSeconds: 120
  replicas: 1 #TODO - adjust this to your own requirements
  template:
    metadata:
      labels:
        app: jaeger
        component: jaeger
    spec:
      containers:
      - name: jaeger
        image: jaegertracing/all-in-one
        resources:
        ports:
        - containerPort: 16686 # Jaeger UI port.
        - containerPort: 14250 # Jaeger agent port.
        env:
          - name: COLLECTOR_OTLP_ENABLED
            value: "true"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: otelcol-conf
  labels:
    app: otelcol
    component: otelcol
data:
  otelcol-config: |
    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: ${env:MY_POD_IP}:4317
          http:
            endpoint: ${env:MY_POD_IP}:4318
    processors:
      batch:
      memory_limiter:
        # 80% of maximum memory up to 2G
        limit_mib: 1500
        # 25% of limit up to 2G
        spike_limit_mib: 512
        check_interval: 5s
    extensions:
      zpages: {}
      memory_ballast:
        # Memory Ballast size should be max 1/3 to 1/2 of memory.
        size_mib: 683
    exporters:
      jaeger: # the Jaeger exporter, to ingest traces to backend
        endpoint: "jaeger:14250"
        tls:
          insecure: true
      jaeger/istio : # the Jaeger exporter, to ingest traces to backend
        endpoint: "jaeger-collector.istio-system:14250"
        tls:
          insecure: true
    service:
      extensions: []
      pipelines:
        traces/1:
          receivers: [otlp]
          processors: [batch]
          exporters: [jaeger]
---
apiVersion: v1
kind: Service
metadata:
  name: otelcol
  labels:
    app: otelcol
    component: otelcol
spec:
  ports:
  - name: otlp-grpc # Default endpoint for OpenTelemetry gRPC receiver.
    port: 4317
    protocol: TCP
    targetPort: 4317
  - name: otlp-http # Default endpoint for OpenTelemetry HTTP receiver.
    port: 4318
    protocol: TCP
    targetPort: 4318
  - name: otlp-metrics # Default endpoint for querying metrics.
    port: 8888
  selector:
    component: otelcol
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: otelcol
  labels:
    app: otelcol
    component: otelcol
spec:
  selector:
    matchLabels:
      app: otelcol
      component: otelcol
  minReadySeconds: 5
  progressDeadlineSeconds: 120
  replicas: 1 #TODO - adjust this to your own requirements
  template:
    metadata:
      labels:
        app: otelcol
        component: otelcol
    spec:
      containers:
      - command:
          - "/otelcol"
          - "--config=/conf/otel-collector-config.yaml"
        image: otel/opentelemetry-collector
        name: otelcol
        resources:
          limits:
            cpu: 1
            memory: 2Gi
          requests:
            cpu: 200m
            memory: 400Mi
        ports:
        - containerPort: 55679 # Default endpoint for ZPages.
        - containerPort: 4317 # Default endpoint for OpenTelemetry receiver.
        - containerPort: 14250 # Default endpoint for Jaeger gRPC receiver.
        - containerPort: 14268 # Default endpoint for Jaeger HTTP receiver.
        - containerPort: 9411 # Default endpoint for Zipkin receiver.
        - containerPort: 8888  # Default endpoint for querying metrics.
        env:
          - name: MY_POD_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
        volumeMounts:
        - name: otelcol-config-vol
          mountPath: /conf
      volumes:
        - configMap:
            name: otelcol-conf
            items:
              - key: otelcol-config
                path: otel-collector-config.yaml
          name: otelcol-config-vol
---
---
apiVersion: v1
kind: Service
metadata:
  name: testotel
  labels:
    app: testotel
    component: testotel
spec:
  ports:
    - name: testotel # endpoint for testotel tomcat app.
      port: 8889
      protocol: TCP
      targetPort: 8080
  selector:
    component: testotel
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: testotel
  labels:
    app: testotel
    component: testotel
spec:
  selector:
    matchLabels:
      app: testotel
      component: testotel
  minReadySeconds: 5
  progressDeadlineSeconds: 120
  replicas: 1 #TODO - adjust this to your own requirements
  template:
    metadata:
      labels:
        app: testotel
        component: testotel
    spec:
      volumes:
        - name: oteljavaagent-vol
          emptyDir: {}
      initContainers:
        - name: init-oteljavaagent
          image: psoorej/oteljavaagent
          command:
            - sh
            - "-ce"
            - |
              set -ex
              cp -r /opt/opentelemetry/* /opt/oteljavaagent
              ls /opt/oteljavaagent
          volumeMounts:
            - mountPath: /opt/oteljavaagent
              name: oteljavaagent-vol
      containers:
        - name: testotel
          image: psoorej/testotel
          resources:
          ports:
            - containerPort: 8080 # Default tomcat port.
          env:
            - name: OTEL_METRICS_EXPORTER
              value: "none"
            - name: OTEL_SERVICE_NAME
              value: "testOTEL"
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: "http://otelcol:4317"
            - name: JAVA_TOOL_OPTIONS
              value: "-javaagent:/usr/local/OTELAgent/opentelemetry-javaagent.jar"
          volumeMounts:
            - name: oteljavaagent-vol
              mountPath: /usr/local/OTELAgent
---
apiVersion: v1
kind: Service
metadata:
  name: testotel1
  labels:
    app: testotel1
    component: testotel1
spec:
  ports:
    - name: testotel1 # endpoint for testotel tomcat app.
      port: 8080
      protocol: TCP
      targetPort: 8080
  selector:
    component: testotel1
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: testotel1
  labels:
    app: testotel1
    component: testotel1
spec:
  selector:
    matchLabels:
      app: testotel1
      component: testotel1
  minReadySeconds: 5
  progressDeadlineSeconds: 120
  replicas: 1 #TODO - adjust this to your own requirements
  template:
    metadata:
      labels:
        app: testotel1
        component: testotel1
    spec:
      initContainers:
        - name: init-oteljavaagent
          image: psoorej/oteljavaagent
          command:
            - sh
            - "-ce"
            - |
              set -ex
              cp -r /opt/opentelemetry/* /opt/oteljavaagent
              ls /opt/oteljavaagent
          volumeMounts:
            - mountPath: /opt/oteljavaagent
              name: oteljavaagent-vol

      containers:
        - name: testotel1
          image: psoorej/testotel1
          resources:
          ports:
            - containerPort: 8080 # Default tomcat port.
          env:
            - name: OTEL_METRICS_EXPORTER
              value: "none"
            - name: OTEL_SERVICE_NAME
              value: "testOTEL1"
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: "http://otelcol:4317"
            - name: JAVA_TOOL_OPTIONS
              value: "-javaagent:/usr/local/OTELAgent/opentelemetry-javaagent.jar"
          volumeMounts:
            - name: oteljavaagent-vol
              mountPath: /usr/local/OTELAgent
      volumes:
        - name: oteljavaagent-vol
          emptyDir: {}
---